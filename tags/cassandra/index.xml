<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cassandra on datanerds.io</title>
    <link>http://datanerds-io.github.io/tags/cassandra/</link>
    <description>Recent content in Cassandra on datanerds.io</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Nov 2016 19:45:48 -0700</lastBuildDate>
    <atom:link href="http://datanerds-io.github.io/tags/cassandra/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WAT - Cassandra: Row level consistency #$@&amp;%*!</title>
      <link>http://datanerds-io.github.io/post/cassandra-no-row-consistency/</link>
      <pubDate>Wed, 23 Nov 2016 19:45:48 -0700</pubDate>
      <guid>http://datanerds-io.github.io/post/cassandra-no-row-consistency/</guid>
      <description>&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; Cassandra &lt;strong&gt;&lt;em&gt;is not&lt;/em&gt;&lt;/strong&gt; row level consistent!!!&lt;/p&gt;&#xA;&lt;p&gt;We published a &lt;a href=&#34;http://datanerds-io.github.io/post/wat-cassandra-1/&#34;&gt;blog post&lt;/a&gt; about some surprising and unexpected behaviors while using Apache Cassandra/DataStax Enterprise some weeks back. Recently, we encountered even more WAT moments and I believe this one is the most distressing.&lt;/p&gt;&#xA;&lt;p&gt;In a nutshell: &lt;strong&gt;We discovered corrupted data&lt;/strong&gt; and it took us a while to understand what was happening and why that data was corrupt. Let&amp;rsquo;s dive into the problem:&lt;/p&gt;</description>
    </item>
    <item>
      <title>WAT - Cassandra</title>
      <link>http://datanerds-io.github.io/post/wat-cassandra-1/</link>
      <pubDate>Mon, 11 Apr 2016 18:00:00 +0200</pubDate>
      <guid>http://datanerds-io.github.io/post/wat-cassandra-1/</guid>
      <description>&lt;p&gt;When using Cassandra*, you sometimes have these &lt;em&gt;WAT&lt;/em&gt; moments. If you don&amp;rsquo;t know what we are talking about, just take a short &lt;a href=&#34;https://www.destroyallsoftware.com/talks/wat&#34;&gt;detour&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Taking a step back and figuring out what things are built for is usually a good idea, so what was Cassandra envisioned for?&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Cassandra does not support a full relational data model; instead, it provides clients with a simple data model that supports dynamic control over data layout and format.&lt;/p&gt;</description>
    </item>
    <item>
      <title>LACK - Consensus via Cassandra</title>
      <link>http://datanerds-io.github.io/post/lack-initial-release/</link>
      <pubDate>Sat, 26 Mar 2016 18:41:00 +0100</pubDate>
      <guid>http://datanerds-io.github.io/post/lack-initial-release/</guid>
      <description>&lt;p&gt;In late 2014 DataStax published a &lt;a href=&#34;http://www.datastax.com/dev/blog/consensus-on-cassandra&#34;&gt;blog post&lt;/a&gt; in which they explain how Cassandra can be leveraged in order to reach consensus in a distributed environment. A detailed explanation can be found in mentioned article. In essence, a distributed lock or mutex mechanism to enforce that only one resource in a distributed and concurrent environment can be changed at the same time. Inspired by said article &lt;em&gt;LACK [luhk]&lt;/em&gt; was implemented. It is a very thin Java API on top of a few Cassandra queries. It is not meant as a consensus library such as libraft or atomix. We just needed something implemented fast and on top of Cassandra.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
